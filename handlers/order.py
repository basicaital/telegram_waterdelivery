from aiogram import Router, F
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State, default_state
from aiogram.types import (Message, CallbackQuery,
                           InlineKeyboardMarkup, InlineKeyboardButton,
                           ReplyKeyboardMarkup, KeyboardButton,
                           InlineQuery, InlineQueryResultArticle,
                           InputTextMessageContent)

import config
from database.requests import register_user, create_order, get_last_address
from handlers.admin import notify_admin
from keyboard.kb import get_delivery_time_keyboard, user_kb
from scripts.utils import get_bottle_word
from aiogram.enums import ChatAction

order_router = Router()
PRICE_PER_BOTTLE = 130


class OrderState(StatesGroup):
    waiting_for_quantity = State()
    waiting_for_address = State()
    waiting_for_phone = State()
    waiting_for_time = State()
    confirm_order = State()


@order_router.message(StateFilter(None), Command('order'))
@order_router.message(F.text.casefold() == "–∑–∞–∫–∞–∑–∞—Ç—å –≤–æ–¥—É")
async def cmd_start(message: Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É—Ç—ã–ª–µ–π, –∫–æ—Ç–æ—Ä–æ–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å?", reply_markup=ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="2"), KeyboardButton(text="3"), KeyboardButton(text="4")],
            [KeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å")]
        ], resize_keyboard=True, input_field_placeholder="–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ"))
    await message.answer_sticker(config.STICKER_ID)
    await state.set_state(OrderState.waiting_for_quantity)


@order_router.message(StateFilter(None), Command(commands=["cancel"]))
@order_router.message(default_state, F.text.lower() == "–æ—Ç–º–µ–Ω–∏—Ç—å")
async def cmd_cancel_no_state(message: Message, state: FSMContext):
    # –°—Ç–µ–π—Ç —Å–±—Ä–∞—Å—ã–≤–∞—Ç—å –Ω–µ –Ω—É–∂–Ω–æ, —É–¥–∞–ª–∏–º —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ
    await state.set_data({})
    await message.answer(
        text="–ù–µ—á–µ–≥–æ –æ—Ç–º–µ–Ω—è—Ç—å",
        reply_markup=user_kb.as_markup(resize_keyboard=True,
                                       input_field_placeholder="–£—Ç–æ–ª–∏ –∂–∞–∂–¥—É")
    )


@order_router.message(Command(commands=["cancel"]))
@order_router.message(F.text.lower() == "–æ—Ç–º–µ–Ω–∏—Ç—å")
async def cmd_cancel(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        text="–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
        reply_markup=user_kb.as_markup(resize_keyboard=True,
                                       input_field_placeholder="–£—Ç–æ–ª–∏ –∂–∞–∂–¥—É")
    )


@order_router.message(OrderState.waiting_for_quantity)
async def process_quantity(message: Message, state: FSMContext):
    quantity = message.text
    if not quantity.isdigit():
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É—Ç—ã–ª–µ–π")
        return
    quantity = int(quantity)
    if quantity < 1:
        await message.reply("‚ùå–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ —á–∏—Å–ª–æ. –ú—ã –¥–æ—Å—Ç–∞–≤–ª—è–µ–º –æ—Ç 1 –¥–æ 50 –±—É—Ç—ã–ª–µ–π")
        return
    if quantity > 50:
        await message.reply("‚ùó–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –±—É—Ç—ã–ª–µ–π - 50")
        return
    await state.update_data(quantity=quantity)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏ üöö", reply_markup=ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–æ—Ç–º–µ–Ω–∏—Ç—å")]
        ], resize_keyboard=True
    ))
    await state.set_state(OrderState.waiting_for_address)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–¥—Ä–µ—Å–∞
@order_router.inline_query(OrderState.waiting_for_address)
async def process_inline_address(query: InlineQuery):
    user_id = query.from_user.id
    recent_address = await get_last_address(user_id) or "–í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å"
    results = [
        InlineQueryResultArticle(
            id='1',
            title="–ü—Ä–µ–¥—ã–¥—É—â–∏–π –∞–¥—Ä–µ—Å",
            description=recent_address,
            input_message_content=InputTextMessageContent(message_text=recent_address)
        )
    ]
    await query.answer(results, cache_time=1, is_personal=True)


@order_router.message(OrderState.waiting_for_address)
async def process_address(message: Message, state: FSMContext):
    address = message.text
    await state.update_data(address=address)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Å–≤—è–∑–∏ —Å –≤–∞–º–∏ üìû")
    await state.set_state(OrderState.waiting_for_phone)


@order_router.message(OrderState.waiting_for_phone)
async def process_phone(message: Message, state: FSMContext):
    phone = message.text
    # Check correct phone_num
    if not phone.isdigit() or len(phone) != 11:
        await message.reply("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä, —Å–æ—Å—Ç–æ—è—â–∏–π –∏–∑ 11 —Ü–∏—Ñ—Ä.")
        return
    # if not phone.isdigit():
    #     await message.reply("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä—ã.")
    #     return
    # if phone and not phone.isdigit():
    #     await message.reply("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –µ—â–µ —Ä–∞–∑.")
    # if len(phone) != 11:
    #     await message.reply("‚ùó–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä.")
    #     return
    await state.update_data(phone=phone)
    await message.bot.send_chat_action(
        chat_id=message.chat.id,
        action=ChatAction.TYPING
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è –¥–ª—è –¥–æ—Å—Ç–∞–≤–∫–∏üïì", reply_markup=get_delivery_time_keyboard())
    await state.set_state(OrderState.waiting_for_time)


@order_router.callback_query(OrderState.waiting_for_time)
async def process_delivery_time(query: CallbackQuery, state: FSMContext):
    delivery_time = query.data.split('_', 1)[1]
    await state.update_data(delivery_time=delivery_time)
    await query.answer()
    data = await state.get_data()
    quantity = data['quantity']
    address = data['address']
    bottle_word = get_bottle_word(quantity)
    # –ü–æ—á–∏–Ω–∏—Ç—å –≤—ã–≤–æ–¥ —Å—É–º–º—ã
    total_cost = PRICE_PER_BOTTLE * quantity

    await query.message.edit_text(
        f"–í—ã –∑–∞–∫–∞–∑–∞–ª–∏ {quantity} {bottle_word} –ø–æ –∞–¥—Ä–µ—Å—É {address}\n"
        f"–í—Ä–µ–º—è –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_time},\n"
        f"–ò—Ç–æ–≥–æ –∫ –æ–ø–ª–∞—Ç–µ: {total_cost} —Ä—É–±.\n"
        f"–í–µ—Ä–Ω–æ?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å‚úî", callback_data="confirm")],
            [InlineKeyboardButton(text="–ò—Å–ø—Ä–∞–≤–∏—Ç—å –∑–∞–∫–∞–∑üìù", callback_data="edit")]
        ]))
    await state.set_state(OrderState.confirm_order)


@order_router.callback_query(OrderState.confirm_order, F.data == "confirm")
async def confirm_order_callback(query: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await query.message.bot.send_chat_action(
        chat_id=query.message.chat.id,
        action=ChatAction.TYPING
    )
    await query.message.edit_text("–í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç –≤ –æ–±—Ä–∞–±–æ—Ç–∫—É.üîç")
    await query.answer()
    quantity = data.get('quantity')
    address = data.get('address')
    phone = data.get('phone')
    delivery_time = data.get('delivery_time')
    user_id = query.from_user.id
    name = query.from_user.full_name
    register_user(user_id, name, address)
    order_id = create_order(user_id, quantity,
                            address, phone, delivery_time
                            )
    await notify_admin(
        order_id, query.message, user_id,
        address, quantity,
        phone, delivery_time
    )
    await state.clear()


@order_router.callback_query(OrderState.confirm_order, F.data == "edit")
async def edit_order_callback(callback_query: CallbackQuery, state: FSMContext):
    await callback_query.message.edit_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É—Ç—ã–ª–µ–π –≤–æ–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å.üíß")
    await state.set_state(OrderState.waiting_for_quantity)
